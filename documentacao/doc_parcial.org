#+OPTIONS: date:nil author:nil toc:nil
#+TITLE: A linguagem de programação Simple3
#+latex_header: \usepackage{indentfirst}
#+latex_header: \usepackage[margin=2cm]{geometry}
#+latex_header: \usepackage[utf8]{inputenc}
#+latex_header: \usepackage[brazilian]{babel}
#+latex_header: \author{{Bellini, Leon F.}\\{\small 22218002-8} \and {Sampaio, Guilherme O.}\\{\small 22218007-7} \and {Barbosa, Pedro F. M.}\\{\small 22218013-5} \and {de Sousa, Felipe M.}\\{\small 22218042-4}}

* Introdução
  
Fanáticos por minimalismo e simplicidade cravam por uma linguagem
desenvolvida como a *Simple3*, na qual o limite de três caracteres em
todas as palavras-chave permite a criação de arquivos fonte com
menores dimensões em questões de espaço em disco utilizado. Vide a
seção [[* Utilização do compilador]] para as instruções de como programar
e compilar um arquivo fonte da *Simple3*.

* Tokens e suas expressões regulares
  
A seguir encontram-se relações de todos *tokens* presentes na linguagem,
bem como as expressões regulares relacionadas à captura destes. Para
maiores informações quanto à utilização e significado de cada *token*,
basta ler o conteúdo presente no arquivo =tokens.py= como mostrado no
exemplo abaixo:

  : less tokens.py 

** Palavras-chave

| *Keywords*  | Expressão regular | Observação                   |
|-----------+-------------------+------------------------------|
| /         | <                 | <                            |
| =tof=       | "tof"             |                              |
| =ifi=       | "ifi"             |                              |
| =els=       | "els"             |                              |
| =elf=       | "elf"             |                              |
| =whl=       | "whl"             |                              |
| =for=       | "for"             |                              |
| =str=       | "str"             |                              |
| =num=       | "num"             |                              |
| =brk=       | "brk"             |                              |
| =jmp=       | "jmp"             |                              |
| {...}     | "\ {" e "\ }"     | definição de escopo          |
| \([...]\) | "\ [" e "\ ]"     | acesso ou definição de vetor |
| (...)     | "\ (" e "\ )"     |                              |
| =emp=       | "emp"             | *nil* ou *null*                  |
| =tru=       | "tru"             |                              |
| =fls=       | "fls"             |                              |
| =eos=       | ";"               | fim de comando/diretiva      |
|-----------+-------------------+------------------------------|

** Literais

| Literais | Expressão regular   | Observação  |
|----------+---------------------+-------------|
| /        | <                   | <           |
| =num=      | "[0-9]+(\.[0-9]+)?" |             |
| =str=      | "\"[\wedge\"]*\""        |             |
| =comment=  | "\wedge(\/3).*\dollar"         | linha única |
|----------+---------------------+-------------|

** Identificadores

| Identificadores | Expressão regular | Observação         |
|-----------------+-------------------+--------------------|
| /               | <                 | <                  |
| =var=             | "[A-z]{3}"        | apenas três letras |
|-----------------+-------------------+--------------------|

** Operadores

| Operador   | Expressão regular | Observação            |
|------------+-------------------+-----------------------|
| /          | <                 | <                     |
| \(+\)      | "\+"              |                       |
| \(-\)      | "\-"              |                       |
| \(*\)      | "\*"              |                       |
| \(/\)      | "\/"              |                       |
| \(\hat{}\) | "\wedge"               | exponenciação         |
| \(>\)      | "\>"              |                       |
| \(<\)      | "\<"              |                       |
| \(>=\)     | "\>\="            |                       |
| \(<=\)     | "\<\="            |                       |
| \(=\)      | "\="              |                       |
| \(==\)     | "\=\="            |                       |
| \(!\)      | "\!"              |                       |
| \(:\)      | ":"               | operador de intervalo |
|------------+-------------------+-----------------------|

* Utilização do compilador

Em todos os sistemas operacionais, a linguagem é dependente do interpretador da linguagem *Python*. Sendo testada e programada seguindo os métodos e padrões definidos em sua versão mais recente, a *3.9.5*. A seguir, serão apresentadas as possíveis formas para executar o compilador da linguagem:

: ./simple3 arquivo_entrada <nome_saida_opcional>


Caso não seja suprimido um nome para o arquivo de saída, este se baseará no /filename/ do arquivo de entrada. Outras possibilidades :

- Arquivo de saída sem ".py" :: Será incluído o sufixo ".py" no /filename/ desejado, exemplo: =./simple3 foo => foo.py=;
- Arquivo de saída não suprimido :: O compilador produzirá um erro sem produzir um arquivo de saída compilado;


Se a execução do /shell script/ falhar, é possível invocar o compilador diretamente através do comando:

: python comple.py arquivo_entrada <nome_saida_opcional>

OBSERVAÇÃO: Alguns sistemas GNU/Linux baseados em Debian como Ubuntu têm =python3= em seu =PATH= como chamada do interpretador da linguagem. Para este caso, o usuário deve modificar o comando anterior.

** A extensão padrão 

A extensão do arquivo deve conter, necessariamente, o sufixo
=.sp3=. Qualquer outro arquivo será negado pelo compilador. O executável
de saída após a compilação tem nome baseado no /filename/ do arquivo de entrada, isto é, a compilação de um arquivo =foo.sp3= resultaria num =foo.py=. 

#+latex: \clearpage

** Exemplo(s) de arquivo fonte

Um arquivo fonte da *Simple3* tem estrutura semelhante ao(s) exemplo(s) a
seguir:

*** Descobrir idade e demo para estruturas para /loop/

 #+include: "arquivo_teste.sp3" src fundamental

*** Converter de graus célsius para graus fahrenheit

 #+include: "arquivo_teste2.sp3" src fundamental

*** Converter de quilômetros por hora para metros por segundo

 #+include: "arquivo_teste3.sp3" src fundamental

*** Teste da idade

 #+include: "arquivo_teste4.sp3" src fundamental

*** Saudações

 #+include: "arquivo_teste5.sp3" src fundamental

*** Sequência de Fibonacci 

 #+include: "arquivo_teste6.sp3" src fundamental

*** Soma de todos os números até 100

 #+include: "arquivo_teste7.sp3" src fundamental

*** Laço infinito

 #+include: "arquivo_teste8.sp3" src fundamental

*** Fatorial

 #+include: "arquivo_teste9.sp3" src fundamental

*** Raízes de uma equação de segundo grau

 #+include: "arquivo_teste10.sp3" src fundamental

*** Força bruta

 #+include: "arquivo_teste11.sp3" src fundamental

*** Prioridade de operações

 #+include: "arquivo_teste12.sp3" src fundamental

*** Operador NOT

 #+include: "arquivo_teste13.sp3" src fundamental

* Estrutura do compilador
  
  A seguir serão detalhados os processos de funcionamento e saída dos processos de compilação, os analisadores léxico, sintático e semântico. Note que, *os analisadores em si não produzem saída além do arquivo compilado final e os devidos tratamentos de exceções*, uma vez que estes são classes cujos membros são as variáveis relevantes para o programador que deseje as utilizar, no caso, para imprimir de maneira propriamente dita o resultado de algum passo que não seja tal arquivo final, o usuário *DEVE* modificar o arquivo fonte, que se apresenta bem documentado. 

** O analisador léxico

A lista produzida  tem como formato:

#+begin_example
[[(<tipo>, <valor>), (<tipo>, <valor>),...]]
#+end_example

O objeto =lexer= criado (se houver sucesso) é repassado como argumento para o construtor do passo a seguir, [[O analisador sintático]], alguns membros da classe os quais podem ser de interesse são:

- =tokens_reconhecidos= :: *todos* os /tokens/ reconhecidos, cada um destes sendo um índice de uma *sub-lista*, cada *sub-lista* representando uma linha do arquivo fonte. 

- =flattened_list= :: A lista de /tokens/ apresentada anteriormente na forma *flat*, ou seja, não apresenta estrutura matricial, esta é sempre passada como argumento para o construtor do analisador sintático. 

Além disso, o método =get_next_token= prova-se útil durante a fase de *análise sintática* ao iterar sobre a =flattened_list= e manter em "cache" o /token/ a seguir. 

** O analisador sintático
   
   Assim que inicializado, o analisador sintático mantém em memória o /token/ atual (=current_token=) e o seguinte. Desta forma, é possível iterar sobre a =flattened_list= e manter, ao mesmo tempo, uma forma de /lookahead/. 

A estrutura do /parser/ foi baseada na gramática livre de contexto definida a seguir, note que, para cada símbolo terminal é definida uma função para implementação por meio da "técnica" de /parsing/ recursiva descendente. 
   
#+INCLUDE: "../simple_parser/glc.org"

O analisador sintático também produz uma *Árvore sintática abstrata* ou /abstract syntax tree/ do inglês, sua classe podendo ser encontrada na pasta =simple_parser= com o nome =arvore_sintatica=. Um simples 

  : help(<no_da_arvore>) 

pode auxiliar o usuário a entender melhor o que cada classe (cada /token/ numa hierarquia) representa na estrutura completa da árvore. 

** O analisador semântico 

A análise semântica ocorre e sinaliza erros durante alguns casos específicos:

- variável não declarada :: necessária *inicialização* das variáveis na linguagem, mesmo que seja utilizado um valor temporário ou "inútil";

- brk ou jmp  :: se estes forem utilizados *fora* de um laço de repetição como =for= ou =whl=;

- tipo incorreto utilizado  :: durante uma inicialização, se a variável recebeu um valor *incompatível* com seu tipo especificado, ex =num var = "foo"=;

- operação com tipos incompatíveis :: se, em uma operação binária aritmética, por exemplo, uma das variáveis do conjunto tem um tipo incompatível com a operação, um exemplo sendo: =90 / "45"=;

#+begin_src python
# No Var da arvore sintatica
def solve(self):
        var_in_table = var_table.lookup(self.value)
        if not var_in_table:
            raise Exception(
                f"Erro semantico: variavel {self.value} usada mas nao declarada"
            )
        else:
            dic_temp = {"num": Num(0), "str": Str(""), "tof": Bool("tru")}
            # eval sobre variavel = valor da variavel 
            return dic_temp[var_in_table["type"].value] 
#+end_src

Perceba a ocorrência da checagem de identificadores já existentes na tabela de símbolos uma vez que a *Simple3* requere que o programador inicialize suas variáveis. Note, também, que a presença da tabela de símbolos prova-se essencial durante a checagem de fatores como escopo e pré existência de identificadores. 

** Geração de código 

A geração de código se aproveita do método =__str__= no qual é possível que a linguagem trata de maneira diferenciada. Com este tipo de método, objetos que os possuam podem "resultar"  em uma /string/ ao serem invocados durante uma chamada de função que se baseie em operações sobre *streams*. De forma geral, se incluirmos um objeto criado a partir de =Whl= (/while/) dentro de uma diretiva =print= ou =write=, este se "auto imprimirá" com o valor:

#+begin_example
while EXPRESSION: 
    body1
    body2
    bodyn 
    ... 
#+end_example

Além disso,  equipe *modificou* o método =solve= criado durante uma fase de desenvolvimento anterior, para que este funcione de forma semelhante ao padrão *visitor*, implementando tratamentos apropriados para a linguagem a qual a compilação acontecerá para. Note que algumas checagens já ocorrem como no exemplo a seguir:

#+begin_src python
def __str__(self):
    if self.operator == ":":
        return f"range({self.left}, {self.right})"
    elif self.operator == "^":
        return f"( {self.left} ** {self.right} )"
    else:
        return f"( {self.left} {self.operator} {self.right} )"
#+end_src

É evidenciada no exemplo anterior, a "visita" de ambos os nós da sub-árvore formada por um operador binário genérico, classe denominada como =BinOp= na árvore sintática abstrata. Cada nó tem seu método =__str__= chamado, gerando as devidas transformações para código em *Python 3*. 

** Mudanças desde o início do projeto
   
   Desde o projeto inicial, ocorreram as seguintes mudanças:

- =and= e =orr= :: Ambos operadores binários os quais podem ser representados por inúmeros =ifis=

- =elf= :: ou =elif= no /Python/. Devido a possibilidade de se obter o mesmo comportamento com uma sequência (=els{ifi {num foo = 22;}}=), a equipe decidiu por excluir tal funcionalidade. 
   
Ambas mudanças se deram pela falta de tempo para a entrega do compilador por completo. Porém, o grupo definiu a linguagem como suficientemente completa, além de simples. É importante relembrar que este é um dos objetivos da linguagem.

* Particularidades da linguagem

Em alguns aspectos, a *Simple3* diferencia-se das outras baseadas nas clássicas derivadas da família ALGOL (C, C++, Java, Javascript, etc.), algumas das mais notáveis sendo:

- Operador NOT :: onde o operando deve sempre estar cercado de parênteses, ex: =(!(fls))=;

  - Quanto a inicialização de variáveis :: =!= não opera enquanto dentro de uma inicialização de variável;

- Inicialização e redefinição de variáveis :: ambas operações apresentam a mesma sintaxe. Redefinição, entretanto, permite a reutilização recursiva da variável já definida, ex: =num aaa = aaa + 42;= onde =aaa= já foi definida anteriormente;

- Apenas letras em nomes de identificadores :: não é permitida a presença de *números* em identificadores, um identificador nomeado =ab1=, por exemplo, causaria um erro durante a fase de análise léxica;

- Comentários :: apenas de linha única e não podem ser precedidos por quaisquer outros caracteres presentes ou não na linguagem definida, ex: =whl (1) { /3 aaaaa (NÃO PERMITIDO)=

- Espaço em branco numa linha :: partindo do pressuposto que cada identificador e/ou /keyword/ tem o valor *fixo* de três caracteres, não é necessária a presença de espaço em branco para que sejam identificados estes elementos como é possível notar a seguir:

#+begin_src fundamental
numaaa=1*1*3+1/5^9;numbbb=1*1*(3+1)/5^9;
numccc=(1*1)*3+(1/5)^9;numccc=(1*1)*(3+(1/5))^9;
numfff=((1*1)*(3+1/5))^9;ifi(!(fls)){emp;}
#+end_src

- Os desenvolvedores recomendam que espaços em branco ainda sejam utilizados para que uma melhor legibilidade seja obtida.






